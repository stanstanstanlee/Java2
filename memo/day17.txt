
================시험범위================

----------------------------------------
주석	연산자(우선순위)	
제어문(한글코딩)	배열(3요소)->컬렉션 프레임워크 
함수(3요소==메서드 시그니처)->메서드	디버깅표
----------------------------------------
객체지향 프로그래밍(OOP) 특징 4가지
 : 추상화 캡슐화 상속 다형성
 a) abstract 추상클래스
	객체화 XXXXX
	추상메서드 == 오버라이딩 강제 
	ex) 포켓몬, 동물(은없어요), 모양(은없어요 세모네모 동그라미가 있을뿐), ...

 b) private + getter , setter
 c) extends 코드 재사용
	오류의 파급효과 줄어듦 -> 개발비용 절감
 d) 메서드 재정의 == 오버라이딩을 했을때, 
	모양의 자식클래스인 원.그리기() 호출하면
	자동으로 오버라이딩된 메서드 그리기()가 실행됨
	== 동적바인딩
	 -> 다형성이 실현되었다!
		VS 함수명 중복정의 허용 == 오버로딩
					-> 생성자에서 자주 발생
						(문제에 나옴)
---------------------------------------
 컬렉션 프레임워크 (이미 잘 만들어진 틀)
	배열리스트, 집합, Map, ... <<중견기업급 이상은 
	개발자의 실력이 상향평준화 
 // 주석 

 예외 처리
	목표 : 프로그램의 비정상적인 종료를 방지
	"나 예외 많이 안다!~~"
		--> 스크린샷! ★
---------------------------------------
스레드 
	웹에서 동일 DB에 동시접속하는 사용자들 파악 등에 활용
파일 입출력
	웹에서 이미지 업로드 등에 활용
==========================================
VO가 2개이상일때!!!

 CRUD 순서로 하는편
C->M->V
 회원가입
C->V->M
 회원목록출력
V->M->C
 목록출력(상품)
M->V->C
 목록검색_출력

회원 데이터 
상품 데이터
좋아요한 목록 데이터
리뷰 데이터 
문의 데이터 

※ VO는 단순 자료형과 같음
View에 활용가능하며,
View에서 DAO에 호출하면 안됨


실습) 목록검색_가격으로 검색
 a) 버튼입력시 가장비싼상품 출력		selectOne(pVO) -> 안쓰는 인자
						  가격 price
						  name을 안쓰는중
						    -> 비싼상품, 싼상품
							  SearchCondition
 b) 버튼입력시 가장싼상품 출력		selectOne(pVO)
 c) 가격입력시 해당금액보다 비싼상품들 출력 	selectAll()
 d) 가격입력시 해당금액보다 싼상품들 출력		selectAll()
 e) 가격을 2번 입력시 금액이 A~B까지의 상품들 출력 		selectAll()
	=> 필터 검색 ☆

"2개이상이될가능성이 1%라도 있다면 selectAll()"













